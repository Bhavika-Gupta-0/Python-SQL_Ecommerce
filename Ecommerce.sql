CREATE DATABASE ecommerce;
USE ecommerce;

-- truncate customers;
-- truncate geolocation;
-- truncate order_items;
-- truncate orders;
-- truncate payments;
-- truncate products;
-- truncate sellers;

-- 1. List all unique cities where customers are located.

SELECT DISTINCT
    customer_city
FROM
    customers;

-- 2. Count the number of orders placed in 2017.

SELECT 
    COUNT(order_id)
FROM
    orders
WHERE
    YEAR(order_purchase_timestamp) = 2017;

-- 3. Find the total sales per category.    

SELECT 
    p.product_category, ROUND(SUM(py.payment_value), 2) AS sales
FROM
    order_items AS o
        JOIN
    products AS p ON o.product_id = p.product_id
        JOIN
    payments AS py ON o.order_id = py.order_id
GROUP BY p.product_category
ORDER BY sales DESC;

-- 4. Calculate the percentage of orders that were paid in installments.

SELECT 
    (SUM(CASE
        WHEN payment_installments > 1 THEN 1
        ELSE 0
    END)) / COUNT(*) * 100 AS installments_percentage
FROM
    payments;

-- 5. Count the number of customers from each state.

SELECT 
    customer_state, COUNT(customer_id)
FROM
    customers
GROUP BY customer_state;


-- 6. Calculate the number of orders per month in 2018.

SELECT 
    MONTHNAME(order_purchase_timestamp) months, COUNT(order_id)
FROM
    orders
WHERE
    YEAR(order_purchase_timestamp) = 2018
GROUP BY months;

-- 7. Find the average number of products per order, grouped by customer city.

WITH count_per_order AS
(SELECT 
    o.order_id, o.customer_id, COUNT(ot.order_id) AS oc
FROM
    orders AS o
        JOIN
    order_items AS ot ON o.order_id = ot.order_id
GROUP BY o.order_id , o.customer_id)

SELECT 
    c.customer_city,
    ROUND(AVG(count_per_order.oc), 2) average_orders
FROM
    customers AS c
        JOIN
    count_per_order ON c.customer_id = count_per_order.customer_id
GROUP BY c.customer_city;


-- 8. Calculate the percentage of total revenue contributed by each product category.

SELECT 
    p.product_category,
    ROUND((SUM(py.payment_value) / (SELECT 
                    SUM(payment_value)
                FROM
                    payments)) * 100,
            2) AS sales_percentage
FROM
    order_items AS o
        JOIN
    products AS p ON o.product_id = p.product_id
        JOIN
    payments AS py ON py.order_id = o.order_id
GROUP BY p.product_category
order by sales_percentage desc;

-- 5. Identify the correlation between product price and the number of times a product has been purchased.

SELECT 
    p.product_category,
    COUNT(o.product_id),
    ROUND(AVG(o.price), 2)
FROM
    products AS p
        JOIN
    order_items AS o ON p.product_id = o.product_id
GROUP BY P.product_category;


-- 10. Calculate the total revenue generated by each seller, and rank them by revenue.

SELECT *, dense_rank() OVER(order by revenue DESC) AS Ranks FROM
(SELECT 
    o.seller_id, ROUND(SUM(p.payment_value),2) AS revenue
FROM
    order_items AS o
        JOIN
    payments AS p ON o.order_id = p.order_id
GROUP BY o.seller_id) AS a;

-- 11. Calculate the moving average of order values for each customer over their order history.

select customer_id, 
       order_purchase_timestamp,
	   payment,
	   avg(payment) over(partition by customer_id order by order_purchase_timestamp rows between 2 preceding and current row) AS Moving_Avg 
FROM
(SELECT 
    o.customer_id,
    o.order_purchase_timestamp,
    p.payment_value AS payment
FROM
    orders AS o
        JOIN
    payments AS p ON o.order_id = p.order_id) as a;





